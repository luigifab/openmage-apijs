/**
 * Copyright 2009-2011 | Fabrice Creuzot (luigifab) <code~luigifab~info>
 * (2.6.0) http://www.luigifab.info/apijs
 *
 * This program is free software, you can redistribute it or modify
 * it under the terms of the GNU General Public License (GPL) as published
 * by the free software foundation, either version 2 of the license, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but without any warranty, without even the implied warranty of
 * merchantability or fitness for a particular purpose. See the
 * GNU General Public License (GPL) for more details.
 */
function Dialogue() {
this.offset = 0;
this.hiddenPage = false;
this.dialogType = null;
this.image = null;
this.timer = null;
this.timerbis = null;
this.callback = null;
this.params = null;
this.fragment = null;
this.elemA = null;
this.elemB = null;
this.elemC = null;
this.elemD = null;
this.dialogInformation = function (title, text, icon) {
if ((typeof title === 'string') && (typeof text === 'string')) {
this.setupDialogue('information', icon);
this.htmlParent(false);
this.htmlTitle(title);
this.htmlText(text);
this.htmlButtonOk();
this.showDialogue();
document.getElementById('box').lastChild.firstChild.focus();
}
else if (apijs.config.debug) {
this.dialogInformation(apijs.i18n.translate('debugInvalidCall'), '[pre]TheDialogue » dialogInformation[br]➩ (string) title : ' + title + '[br]➩ (string) text : ' + text + '[br]➩ (string) icon : ' + icon + '[/pre]');
}
};
this.dialogConfirmation = function (title, text, callback, params, icon) {
if ((typeof title === 'string') && (typeof text === 'string') && (typeof callback === 'function') && (typeof params !== 'undefined')) {
this.setupDialogue('confirmation', icon);
this.htmlParent(false);
this.htmlTitle(title);
this.htmlText(text);
this.htmlButtonConfirm('button');
this.callback = callback;
this.params = params;
this.showDialogue();
document.getElementById('box').lastChild.firstChild.focus();
}
else if (apijs.config.debug) {
if ((typeof callback === 'function') && (typeof callback.name === 'string') && (callback.name.length > 0))
callback = callback.name;
this.dialogInformation(apijs.i18n.translate('debugInvalidCall'), '[pre]TheDialogue » dialogConfirmation[br]➩ (string) title : ' + title + '[br]➩ (string) text : ' + text + '[br]➩ (function) callback : ' + callback + '[br]➩ (object) params : ' + params + '[br]➩ (string) icon : ' + icon + '[/pre]');
}
};
this.dialogFormOptions = function (title, text, callback, params, action, icon) {
if ((typeof title === 'string') && (typeof text === 'string') && (typeof callback === 'function') && (typeof params !== 'undefined') && (typeof action === 'string')) {
this.setupDialogue('options', icon);
this.htmlFormParent(action);
this.htmlTitle(title);
this.htmlText(text);
this.htmlButtonConfirm('submit');
this.callback = callback;
this.params = params;
this.showDialogue();
}
else if (apijs.config.debug) {
if ((typeof callback === 'function') && (typeof callback.name === 'string') && (callback.name.length > 0))
callback = callback.name;
this.dialogInformation(apijs.i18n.translate('debugInvalidCall'), '[pre]TheDialogue » dialogFormOptions[br]➩ (string) title : ' + title + '[br]➩ (string) text : ' + text + '[br]➩ (function) callback : ' + callback + '[br]➩ (object) params : ' + params + '[br]➩ (string) action : ' + action + '[br]➩ (string) icon : ' + icon + '[/pre]');
}
};
this.dialogFormUpload = function (title, text, data, key, icon) {
if ((typeof title === 'string') && (typeof text === 'string') && (typeof key === 'string') && (typeof data === 'string')) {
this.setupDialogue('upload', icon);
this.htmlFormParent(apijs.config.dialogue.fileUpload, 'multipart/form-data', 'iframeUpload.' + key);
this.htmlTitle(title);
this.htmlText(text);
this.htmlFormUpload(data, key);
this.htmlButtonConfirm('submit');
this.showDialogue();
window.setTimeout(function () { document.getElementById('box').getElementsByTagName('input')[1].focus(); }, 10);
}
else if (apijs.config.debug) {
this.dialogInformation(apijs.i18n.translate('debugInvalidCall'), '[pre]TheDialogue » dialogFormUpload[br]➩ (string) title : ' + title + '[br]➩ (string) text : ' + text + '[br]➩ (string) data : ' + data + '[br]➩ (string) key : ' + key + '[br]➩ (string) icon : ' + icon + '[/pre]');
}
};
this.dialogProgress = function (title, text) {
if ((typeof title === 'string') && (typeof text === 'string')) {
this.setupDialogue('progress');
this.htmlParent(false);
this.htmlTitle(title);
this.htmlText(text);
this.htmlProgressBar();
this.showDialogue();
}
else if (apijs.config.debug) {
this.dialogInformation(apijs.i18n.translate('debugInvalidCall'), '[pre]TheDialogue » dialogProgress[br]➩ (string) title : ' + title + '[br]➩ (string) text : ' + text + '[/pre]');
}
};
this.dialogWaiting = function (title, text, time) {
if ((typeof title === 'string') && (typeof text === 'string')) {
this.setupDialogue('waiting');
this.htmlParent(false);
this.htmlTitle(title);
this.htmlText(text);
this.showDialogue();
this.timer = window.setTimeout(apijs.dialogue.htmlLinkReload, (typeof time === 'number') ? time : 10000);
}
else if (apijs.config.debug) {
this.dialogInformation(apijs.i18n.translate('debugInvalidCall'), '[pre]TheDialogue » dialogWaiting[br]➩ (string) title : ' + title + '[br]➩ (string) text : ' + text + '[br]➩ (number) time : ' + time + '[/pre]');
}
};
this.dialogPhoto = function (width, height, url, name, date, legend, slideshow) {
if ((typeof width === 'number') && (typeof height === 'number') && (typeof url === 'string') && (typeof name === 'string') && (typeof date === 'string') && (typeof legend === 'string')) {
if ((typeof slideshow === 'boolean') && (slideshow === true)) {
this.setupDialogue('photo slideshow');
this.htmlParent(true);
}
else {
this.setupDialogue('photo');
this.htmlParent(false);
}
this.htmlPhoto(width, height, url, name, date, legend);
this.htmlButtonClose();
this.htmlButtonNavigation();
this.showDialogue();
this.loadImage(width, height, url);
}
else if (apijs.config.debug) {
this.dialogInformation(apijs.i18n.translate('debugInvalidCall'), '[pre]TheDialogue » dialogPhoto[br]➩ (number) width : ' + width + '[br]➩ (number) height : ' + height + '[br]➩ (string) url : ' + url + '[br]➩ (string) name : ' + name + '[br]➩ (string) date : ' + date + '[br]➩ (string) legend : ' + legend + '[/pre]');
}
};
this.dialogVideo = function (url, name, date, legend, slideshow) {
if ((typeof url === 'string') && (typeof name === 'string') && (typeof legend === 'string') && (typeof legend === 'string')) {
if ((typeof slideshow === 'boolean') && (slideshow === true)) {
this.setupDialogue('video slideshow');
this.htmlParent(true);
}
else {
this.setupDialogue('video');
this.htmlParent(false);
}
this.htmlVideo(url, name, date, legend);
this.htmlButtonClose();
this.htmlButtonNavigation();
this.showDialogue();
}
else if (apijs.config.debug) {
this.dialogInformation(apijs.i18n.translate('debugInvalidCall'), '[pre]TheDialogue » dialogVideo[br]➩ (string) url : ' + url + '[br]➩ (string) name : ' + name + '[br]➩ (string) date : ' + date + '[br]➩ (string) legend : ' + legend + '[/pre]');
}
};
this.actionClose = function (all) {
if (all) {
apijs.dialogue.deleteDialogue(true);
apijs.dialogue.showPage();
}
else {
apijs.dialogue.deleteDialogue(false);
}
};
this.actionConfirm = function () {
var result = false;
if (this.dialogType.indexOf('confirmation') > -1) {
this.dialogType += ' lock';
if (!apijs.config.dialogue.savingDialog) {
this.elemA = document.createElement('p');
this.elemA.setAttribute('class', 'saving');
this.elemA.appendChild(document.createTextNode(apijs.i18n.translate('operationInProgress')));
document.getElementById('box').removeChild(document.getElementById('box').lastChild);
document.getElementById('box').lastChild.setAttribute('class', 'novisible');
document.getElementById('box').appendChild(this.elemA);
this.timer = window.setTimeout(apijs.dialogue.htmlLinkReload, 10000);
}
else {
this.dialogWaiting(document.getElementById('box').firstChild.firstChild.nodeValue, apijs.i18n.translate('operationInProgress'));
}
if (apijs.config.dialogue.savingTime > 500) {
this.timerbis = window.setTimeout(function () {
if (typeof apijs.dialogue.callback === 'function')
apijs.dialogue.callback(apijs.dialogue.params);
}, apijs.config.dialogue.savingTime);
}
else {
apijs.dialogue.callback(apijs.dialogue.params);
}
result = true;
}
else if (this.dialogType.indexOf('options') > -1) {
if (apijs.dialogue.callback(apijs.dialogue.clone(apijs.dialogue.params)) === true) {
this.dialogType += ' lock';
this.elemA = document.createElement('p');
this.elemA.setAttribute('class', 'saving');
this.elemA.appendChild(document.createTextNode(apijs.i18n.translate('operationInProgress')));
document.getElementById('box').removeChild(document.getElementById('box').lastChild);
document.getElementById('box').lastChild.setAttribute('class', 'novisible');
document.getElementById('box').appendChild(this.elemA);
this.timer = window.setTimeout(apijs.dialogue.htmlLinkReload, 10000);
if (apijs.config.dialogue.savingTime > 500) {
this.timerbis = window.setTimeout(function () {
if (document.getElementById('box') && (document.getElementById('box').nodeName.toLowerCase() === 'form'))
document.getElementById('box').submit();
}, apijs.config.dialogue.savingTime);
}
else {
result = true;
}
}
}
else if (this.dialogType.indexOf('upload') > -1) {
if ((typeof Upload === 'function') && (apijs.upload instanceof Upload)) {
if (apijs.upload.actionConfirm() === true) {
this.dialogType += ' lock';
result = true;
}
}
else if (apijs.config.debug) {
this.dialogInformation(apijs.i18n.translate('debugInvalidUse'), '[pre]TheDialogue » actionConfirm[br]➩ TheUpload ' + apijs.i18n.translate('debugNotExist') + '[/pre]');
}
}
return result;
};
this.actionKey = function (ev) {
if (apijs.config.debugkey) {
ev.preventDefault();
apijs.dialogue.dialogInformation(apijs.i18n.translate('debugKeyDetected'), '[pre]TheDialogue » actionKey[br]' + apijs.i18n.translate('debugKeyCode', ev.keyCode) + '[/pre]');
}
else if ((ev.keyCode !== 27) && (ev.keyCode !== 35) && (ev.keyCode !== 36) && (ev.keyCode !== 37) && (ev.keyCode !== 39)) {
return;
}
else if (ev.keyCode === 27) {
if ((apijs.dialogue.dialogType.indexOf('waiting') > -1) || (apijs.dialogue.dialogType.indexOf('progress') > -1) ||
(apijs.dialogue.dialogType.indexOf('lock') > -1)) {
ev.preventDefault();
}
else {
ev.preventDefault();
apijs.dialogue.actionClose(true);
}
}
else if (apijs.dialogue.dialogType.indexOf('slideshow') > -1) {
if (ev.keyCode === 35) {
ev.preventDefault();
apijs.slideshow.actionLast();
}
else if (ev.keyCode === 36) {
ev.preventDefault();
apijs.slideshow.actionFirst();
}
else if (ev.keyCode === 37) {
ev.preventDefault();
apijs.slideshow.actionPrev();
}
else if (ev.keyCode === 39) {
ev.preventDefault();
apijs.slideshow.actionNext();
}
}
};
this.setupDialogue = function (type, icon) {
var actionHidden = false, actionShow = false, id = null;
if (this.dialogType !== null) {
if (this.dialogType.indexOf('slideshow') > -1) {
if (!this.hiddenPage && apijs.config.dialogue.hiddenPage)
actionHidden = true;
else if (this.hiddenPage && !apijs.config.dialogue.hiddenPage)
actionShow = true;
}
else {
if (!this.hiddenPage && apijs.config.dialogue.hiddenPage)
actionHidden = true;
else if (this.hiddenPage && !apijs.config.dialogue.hiddenPage)
actionShow = true;
}
}
else {
if (type.indexOf('slideshow') > -1) {
if (!this.hiddenPage && apijs.config.slideshow.hiddenPage)
actionHidden = true;
}
else {
if (!this.hiddenPage && apijs.config.dialogue.hiddenPage)
actionHidden = true;
}
}
if ((this.dialogType !== null) && (this.dialogType.indexOf('slideshow') > -1)) {
this.deleteDialogue(false);
document.getElementById('dialogue').setAttribute('class', document.getElementById('dialogue').getAttribute('class').replace(' slideshow', ''));
}
else if (this.dialogType !== null) {
this.deleteDialogue(false);
}
if (actionHidden) {
if ((window.pageYOffset > 0) || (this.offset > 0))
this.offset = window.pageYOffset;
for (id in apijs.config.dialogue.blocks) if (apijs.config.dialogue.blocks.hasOwnProperty(id))
document.getElementById(apijs.config.dialogue.blocks[id]).setAttribute('class', 'nodisplay');
}
else if (actionShow) {
this.showPage();
}
if (apijs.config.navigator)
document.addEventListener('keydown', apijs.dialogue.actionKey, false);
this.dialogType = (typeof icon !== 'string') ? type : (type + ' ' + icon);
this.hiddenPage = (actionHidden || this.hiddenPage) ? true : false;
this.fragment = document.createDocumentFragment();
};
this.showDialogue = function () {
if (document.getElementById('dialogue')) {
this.fragment.firstChild.setAttribute('class', this.fragment.firstChild.getAttribute('class').replace('init', 'actif'));
document.getElementById('dialogue').appendChild(this.fragment.firstChild.firstChild);
}
else if (!apijs.config.transition) {
this.fragment.firstChild.setAttribute('class', this.fragment.firstChild.getAttribute('class').replace('init', 'actif'));
document.getElementsByTagName('body')[0].appendChild(this.fragment);
}
else {
document.getElementsByTagName('body')[0].appendChild(this.fragment);
window.setTimeout(function () { document.getElementById('dialogue').setAttribute('class', document.getElementById('dialogue').getAttribute('class').replace('init', 'actif')); }, 1);
}
};
this.deleteDialogue = function (total) {
if (this.timer)
clearTimeout(this.timer);
if (apijs.config.navigator)
document.removeEventListener('keydown', apijs.dialogue.actionKey, false);
if (apijs.config.navigator && (document.getElementById('dialogue').getElementsByTagName('video').length > 0)) {
if (typeof document.getElementById('dialogue').getElementsByTagName('video')[0].pause === 'function')
document.getElementById('dialogue').getElementsByTagName('video')[0].pause();
}
if (apijs.config.transition && total) {
document.getElementById('dialogue').setAttribute('class', document.getElementById('dialogue').getAttribute('class').replace('actif', 'deleting lock'));
if (typeof document.getElementById('dialogue').style.transitionDuration === 'string')
document.getElementById('dialogue').addEventListener('transitionEnd', function () {
if (document.getElementById('dialogue'))
document.getElementById('dialogue').parentNode.removeChild(document.getElementById('dialogue'));
}, false);
else if (typeof document.getElementById('dialogue').style.OTransitionDuration === 'string')
document.getElementById('dialogue').addEventListener('OTransitionEnd', function () {
if (document.getElementById('dialogue'))
document.getElementById('dialogue').parentNode.removeChild(document.getElementById('dialogue'));
}, false);
else if (typeof document.getElementById('dialogue').style.MozTransitionDuration === 'string')
document.getElementById('dialogue').addEventListener('transitionend', function () {
if (document.getElementById('dialogue'))
document.getElementById('dialogue').parentNode.removeChild(document.getElementById('dialogue'));
}, false);
else if (typeof document.getElementById('dialogue').style.webkitTransitionDuration === 'string')
document.getElementById('dialogue').addEventListener('webkitTransitionEnd', function () {
if (document.getElementById('dialogue'))
document.getElementById('dialogue').parentNode.removeChild(document.getElementById('dialogue'));
}, false);
}
else if (total) {
document.getElementById('dialogue').parentNode.removeChild(document.getElementById('dialogue'));
}
else {
document.getElementById('box').parentNode.removeChild(document.getElementById('box'));
}
this.dialogType = null;
this.image = null;
this.timer = null;
this.fragment = null;
this.elemA = null;
this.elemB = null;
this.elemC = null;
this.elemD = null;
};
this.showPage = function () {
if (document.getElementById('iframeUpload'))
document.getElementById('iframeUpload').parentNode.removeChild(document.getElementById('iframeUpload'));
if (this.hiddenPage) {
for (var id in apijs.config.dialogue.blocks) if (apijs.config.dialogue.blocks.hasOwnProperty(id))
document.getElementById(apijs.config.dialogue.blocks[id]).removeAttribute('class');
window.scrollBy(0, this.offset);
}
this.offset = 0;
this.hiddenPage = false;
if (this.timerbis)
clearTimeout(this.timerbis);
this.timerbis = null;
this.callback = null;
this.params = null;
};
this.checkSize = function (width, height) {
if ((width > (window.innerWidth - 150)) || (height > (window.innerHeight - 110)))
return true;
else
return false;
};
this.updateSize = function (width, height, url) {
var infoMedia = null, infoWindow = null, mimeTypes = null;
infoMedia = { width: width, height: height, id: url.slice((url.lastIndexOf('/') + 1), url.lastIndexOf('.')), mime: null };
infoWindow = { width: window.innerWidth, height: window.innerHeight };
mimeTypes = {
ogv: 'video/ogg', webm: 'video/webm',
jpg: 'image/jpeg', jpeg: 'image/jpeg',
png: 'image/png', gif: 'image/gif',
svg: 'image/svg+xml'
};
infoMedia.mime = url.slice(url.lastIndexOf('.') + 1);
if (infoMedia.mime in mimeTypes)
infoMedia.mime = mimeTypes[infoMedia.mime];
if (this.checkSize(width, height)) {
infoWindow.width -= 150;
infoWindow.height -= 110;
if (infoMedia.width > infoWindow.width) {
infoMedia.height = Math.floor(infoMedia.height * (infoWindow.width / infoMedia.width));
infoMedia.width = infoWindow.width;
if (infoMedia.height > infoWindow.height) {
infoMedia.width = Math.floor(infoMedia.width * (infoWindow.height / infoMedia.height));
infoMedia.height = infoWindow.height;
}
}
else if (infoMedia.height > infoWindow.height) {
infoMedia.width = Math.floor(infoMedia.width * (infoWindow.height / infoMedia.height));
infoMedia.height = infoWindow.height;
if (infoMedia.width > infoWindow.width) {
infoMedia.height = Math.floor(infoMedia.height * (infoWindow.width / infoMedia.width));
infoMedia.width = infoWindow.width;
}
}
}
this.fragment.firstChild.firstChild.style.width = infoMedia.width + 'px';
this.fragment.firstChild.firstChild.style.marginLeft = parseInt(-(infoMedia.width + 20) / 2, 10) + 'px';
this.fragment.firstChild.firstChild.style.marginTop = parseInt(-(infoMedia.height + 65) / 2, 10) + 'px';
return infoMedia;
};
this.loadImage = function (width, height, url) {
if (apijs.config.navigator && apijs.config.dialogue.showLoader) {
this.image = new Image(width, height);
this.image.src = url;
this.image.addEventListener('load', function () {
if (document.getElementById('topho')) {
document.getElementById('topho').removeAttribute('class');
document.getElementById('topho').setAttribute('src', apijs.dialogue.image.src);
}
}, false);
this.image.addEventListener('error', function () {
if (document.getElementById('topho')) {
if (document.getElementById('topho').getAttribute('class').indexOf('resized') > -1) {
var img = document.getElementById('topho').cloneNode(true);
document.getElementById('topho').parentNode.parentNode.removeChild(document.getElementById('topho').parentNode);
document.getElementById('box').firstChild.firstChild.appendChild(img);
}
if (apijs.config.dialogue.savePhoto)
document.getElementById('box').firstChild.lastChild.removeChild(document.getElementById('box').firstChild.lastChild.lastChild);
document.getElementById('topho').setAttribute('class', 'error_' + apijs.config.lang);
}
}, false);
}
else {
document.getElementById('topho').removeAttribute('class');
document.getElementById('topho').setAttribute('src', url);
}
};
this.clone = function (data) {
if ((typeof data !== 'object') || (data === null))
return data;
var key = null, newData = new data.constructor();
for (key in data)
newData[key] = apijs.dialogue.clone(data[key]);
return newData;
};
this.htmlParent = function (slideshow) {
this.elemA = document.createElement('div');
this.elemA.setAttribute('class', ((slideshow) ? 'init slideshow' : 'init'));
this.elemA.setAttribute('id', 'dialogue');
this.elemB = document.createElement('div');
this.elemB.setAttribute('class', this.dialogType);
this.elemB.setAttribute('id', 'box');
this.elemA.appendChild(this.elemB);
this.fragment.appendChild(this.elemA);
};
this.htmlFormParent = function (action, enctype, target) {
this.elemA = document.createElement('div');
this.elemA.setAttribute('class', 'init');
this.elemA.setAttribute('id', 'dialogue');
this.elemB = document.createElement('form');
this.elemB.setAttribute('action', action);
this.elemB.setAttribute('method', 'post');
if (typeof enctype === 'string')
this.elemB.setAttribute('enctype', enctype);
if (typeof target === 'string')
this.elemB.setAttribute('target', target);
this.elemB.setAttribute('onsubmit', 'return apijs.dialogue.actionConfirm();');
this.elemB.setAttribute('class', this.dialogType);
this.elemB.setAttribute('id', 'box');
this.elemA.appendChild(this.elemB);
this.fragment.appendChild(this.elemA);
};
this.htmlTitle = function (title) {
this.elemA = document.createElement('h1');
this.elemA.appendChild(document.createTextNode(title));
this.fragment.firstChild.firstChild.appendChild(this.elemA);
};
this.htmlText = function (data) {
var bbcode = new BBcode();
bbcode.init(data, apijs.config.dialogue.emotes);
bbcode.exec();
this.fragment.firstChild.firstChild.appendChild(bbcode.get());
};
this.htmlButtonOk = function () {
this.elemA = document.createElement('div');
this.elemA.setAttribute('class', 'control');
this.elemB = document.createElement('button');
this.elemB.setAttribute('type', 'button');
this.elemB.setAttribute('onclick', 'apijs.dialogue.actionClose(true);');
this.elemB.setAttribute('class', 'confirm');
this.elemB.appendChild(document.createTextNode(apijs.i18n.translate('buttonOk')));
this.elemA.appendChild(this.elemB);
this.fragment.firstChild.firstChild.appendChild(this.elemA);
};
this.htmlButtonConfirm = function (type) {
this.elemA = document.createElement('div');
this.elemA.setAttribute('class', 'control');
this.elemB = document.createElement('button');
this.elemB.setAttribute('type', type);
this.elemB.setAttribute('class', 'confirm');
if (type !== 'submit')
this.elemB.setAttribute('onclick', 'apijs.dialogue.actionConfirm();');
this.elemB.appendChild(document.createTextNode(apijs.i18n.translate('buttonConfirm')));
this.elemA.appendChild(this.elemB);
this.elemB = document.createElement('button');
this.elemB.setAttribute('type', 'button');
this.elemB.setAttribute('class', 'cancel');
this.elemB.setAttribute('onclick', 'apijs.dialogue.actionClose(true);');
this.elemB.appendChild(document.createTextNode(apijs.i18n.translate('buttonCancel')));
this.elemA.appendChild(this.elemB);
this.fragment.firstChild.firstChild.appendChild(this.elemA);
};
this.htmlButtonNavigation = function () {
var txt = ((apijs.config.dialogue.imagePrev === null) || (apijs.config.dialogue.imageNext === null)) ? true : false;
this.elemA = document.createElement('div');
this.elemA.setAttribute('class', 'navigation ' + ((txt) ? 'txt' : 'img'));
this.elemB = document.createElement('button');
this.elemB.setAttribute('type', 'button');
this.elemB.setAttribute('disabled', 'disabled');
this.elemB.setAttribute('onclick', 'apijs.slideshow.actionPrev();');
this.elemB.setAttribute('id', 'prev');
if (txt) {
this.elemB.appendChild(document.createTextNode(apijs.i18n.translate('buttonPrev')));
}
else {
this.elemC = document.createElement('img');
this.elemC.setAttribute('src', apijs.config.dialogue.imagePrev.src);
this.elemC.setAttribute('width', apijs.config.dialogue.imagePrev.width);
this.elemC.setAttribute('height', apijs.config.dialogue.imagePrev.height);
this.elemC.setAttribute('alt', apijs.i18n.translate('buttonPrev'));
this.elemB.appendChild(this.elemC);
}
this.elemA.appendChild(this.elemB);
this.elemB = document.createElement('button');
this.elemB.setAttribute('type', 'button');
this.elemB.setAttribute('disabled', 'disabled');
this.elemB.setAttribute('onclick', 'apijs.slideshow.actionNext();');
this.elemB.setAttribute('id', 'next');
if (txt) {
this.elemB.appendChild(document.createTextNode(apijs.i18n.translate('buttonNext')));
}
else {
this.elemC = document.createElement('img');
this.elemC.setAttribute('src', apijs.config.dialogue.imageNext.src);
this.elemC.setAttribute('width', apijs.config.dialogue.imageNext.width);
this.elemC.setAttribute('height', apijs.config.dialogue.imageNext.height);
this.elemC.setAttribute('alt', apijs.i18n.translate('buttonNext'));
this.elemB.appendChild(this.elemC);
}
this.elemA.appendChild(this.elemB);
this.fragment.firstChild.firstChild.appendChild(this.elemA);
};
this.htmlButtonClose = function () {
this.elemA = document.createElement('div');
this.elemA.setAttribute('class', 'close');
this.elemB = document.createElement('button');
this.elemB.setAttribute('type', 'button');
this.elemB.setAttribute('onclick', 'apijs.dialogue.actionClose(true);');
this.elemB.setAttribute('class', 'close');
if (apijs.config.dialogue.imageClose !== null) {
this.elemC = document.createElement('img');
this.elemC.setAttribute('src', apijs.config.dialogue.imageClose.src);
this.elemC.setAttribute('width', apijs.config.dialogue.imageClose.width);
this.elemC.setAttribute('height', apijs.config.dialogue.imageClose.height);
this.elemC.setAttribute('alt', apijs.i18n.translate('buttonClose'));
this.elemB.appendChild(this.elemC);
}
else {
this.elemB.appendChild(document.createTextNode(apijs.i18n.translate('buttonClose')));
}
this.elemA.appendChild(this.elemB);
this.fragment.firstChild.firstChild.appendChild(this.elemA);
};
this.htmlLinkReload = function () {
this.elemA = document.createElement('p');
this.elemA.setAttribute('class', 'reload');
this.elemA.appendChild(document.createTextNode(apijs.i18n.translate('operationTooLong')));
this.elemB = document.createElement('a');
this.elemB.setAttribute('href', location.href);
this.elemB.appendChild(document.createTextNode(apijs.i18n.translate('reloadLink')));
this.elemA.appendChild(this.elemB);
this.elemA.appendChild(document.createTextNode('.'));
this.elemB = document.createElement('br');
this.elemA.appendChild(this.elemB);
this.elemA.appendChild(document.createTextNode(apijs.i18n.translate('warningLostChange')));
document.getElementById('box').appendChild(this.elemA);
};
this.htmlFormUpload = function (data, key) {
this.elemA = document.createElement('iframe');
if (apijs.config.navigator)
this.elemA.setAttribute('src', apijs.config.dialogue.imageUpload.src);
this.elemA.setAttribute('name', 'iframeUpload.' + key);
this.elemA.setAttribute('id', 'iframeUpload');
document.getElementsByTagName('body')[0].appendChild(this.elemA);
this.elemA = document.createElement('div');
this.elemB = document.createElement('input');
this.elemB.setAttribute('type', 'hidden');
this.elemB.setAttribute('name', 'APC_UPLOAD_PROGRESS');
this.elemB.setAttribute('value', key);
this.elemA.appendChild(this.elemB);
this.elemB = document.createElement('input');
this.elemB.setAttribute('type', 'file');
this.elemB.setAttribute('name', data);
this.elemB.setAttribute('onchange', "document.getElementById('box').lastChild.firstChild.focus();");
this.elemA.appendChild(this.elemB);
this.fragment.firstChild.firstChild.appendChild(this.elemA);
};
this.htmlProgressBar = function () {
if (apijs.config.navigator) {
this.elemA = document.createElement('object');
this.elemA.setAttribute('data', apijs.config.dialogue.imageUpload.src);
this.elemA.setAttribute('type', 'image/svg+xml');
this.elemA.setAttribute('width', apijs.config.dialogue.imageUpload.width);
this.elemA.setAttribute('height', apijs.config.dialogue.imageUpload.height);
this.elemA.setAttribute('id', 'progressbar');
this.fragment.firstChild.firstChild.appendChild(this.elemA);
}
else if (!apijs.config.navigator) {
this.elemA = document.createElement('embed');
this.elemA.setAttribute('src', apijs.config.dialogue.imageUpload.src);
this.elemA.setAttribute('type', 'image/svg+xml');
this.elemA.setAttribute('wmode', 'transparent');
this.elemA.setAttribute('width', apijs.config.dialogue.imageUpload.width);
this.elemA.setAttribute('height', apijs.config.dialogue.imageUpload.height);
this.elemA.setAttribute('id', 'progressbar');
this.fragment.firstChild.firstChild.appendChild(this.elemA);
}
};
this.htmlPhoto = function (width, height, url, name, date, legend) {
var infoPhoto = this.updateSize(width, height, url);
this.elemA = document.createElement('dl');
this.elemB = document.createElement('dt');
if (apijs.config.dialogue.showFullsize && this.checkSize(width, height)) {
this.elemC = document.createElement('a');
this.elemC.setAttribute('href', url);
this.elemC.setAttribute('onclick', 'window.open(this.href); this.blur(); return false;');
this.elemD = document.createElement('img');
this.elemD.setAttribute('width', infoPhoto.width);
this.elemD.setAttribute('height', infoPhoto.height);
this.elemD.setAttribute('alt', '');
this.elemD.setAttribute('class', 'loading resized');
this.elemD.setAttribute('id', 'topho');
this.elemC.appendChild(this.elemD);
this.elemC.appendChild(document.createElement('span'));
}
else {
this.elemC = document.createElement('img');
this.elemC.setAttribute('width', infoPhoto.width);
this.elemC.setAttribute('height', infoPhoto.height);
this.elemC.setAttribute('alt', '');
this.elemC.setAttribute('class', 'loading');
this.elemC.setAttribute('id', 'topho');
}
this.elemB.appendChild(this.elemC);
this.elemA.appendChild(this.elemB);
this.elemB = document.createElement('dd');
if ((name !== 'false') || (date !== 'false')) {
this.elemC = document.createElement('span');
if ((name !== 'false') && (name !== 'auto') && (date !== 'false'))
this.elemC.appendChild(document.createTextNode(name + ' (' + date + ')'));
else if ((name !== 'false') && (name !== 'auto'))
this.elemC.appendChild(document.createTextNode(name));
else if ((name === 'auto') && (date !== 'false'))
this.elemC.appendChild(document.createTextNode(infoPhoto.id + ' (' + date + ')'));
else if (name === 'auto')
this.elemC.appendChild(document.createTextNode(infoPhoto.id));
else if (date !== 'false')
this.elemC.appendChild(document.createTextNode('(' + date + ')'));
this.elemB.appendChild(this.elemC);
}
this.elemB.appendChild(document.createTextNode(' ' + legend + ' '));
if (apijs.config.dialogue.savePhoto) {
this.elemC = document.createElement('a');
this.elemC.setAttribute('href', apijs.config.dialogue.filePhoto + '?id=' + infoPhoto.id);
this.elemC.setAttribute('type', infoPhoto.mime);
this.elemC.setAttribute('class', 'download');
this.elemC.appendChild(document.createTextNode(apijs.i18n.translate('downloadLink')));
this.elemB.appendChild(this.elemC);
}
this.elemA.appendChild(this.elemB);
this.fragment.firstChild.firstChild.appendChild(this.elemA);
};
this.htmlVideo = function (url, name, date, legend) {
var infoVideo = this.updateSize(apijs.config.dialogue.videoWidth, apijs.config.dialogue.videoHeight, url), novideo = null;
this.elemA = document.createElement('dl');
this.elemB = document.createElement('dt');
this.elemC = document.createElement('video');
this.elemC.setAttribute('src', url);
this.elemC.setAttribute('width', infoVideo.width);
this.elemC.setAttribute('height', infoVideo.height);
this.elemC.setAttribute('controls', 'controls');
if (apijs.config.dialogue.videoAutoplay)
this.elemC.setAttribute('autoplay', 'autoplay');
if (typeof this.elemC.pause !== 'function') {
novideo = new BBcode();
novideo.init(apijs.i18n.translate('browserNoVideo'));
novideo.exec();
this.elemC.appendChild(novideo.get());
this.elemC.style.width = infoVideo.width;
this.elemC.style.height = infoVideo.height;
}
this.elemB.appendChild(this.elemC);
this.elemA.appendChild(this.elemB);
this.elemB = document.createElement('dd');
if ((name !== 'false') || (date !== 'false')) {
this.elemC = document.createElement('span');
if ((name !== 'false') && (name !== 'auto') && (date !== 'false'))
this.elemC.appendChild(document.createTextNode(name + ' (' + date + ')'));
else if ((name !== 'false') && (name !== 'auto'))
this.elemC.appendChild(document.createTextNode(name));
else if ((name === 'auto') && (date !== 'false'))
this.elemC.appendChild(document.createTextNode(infoVideo.id + ' (' + date + ')'));
else if (name === 'auto')
this.elemC.appendChild(document.createTextNode(infoVideo.id));
else if (date !== 'false')
this.elemC.appendChild(document.createTextNode('(' + date + ')'));
this.elemB.appendChild(this.elemC);
}
this.elemB.appendChild(document.createTextNode(' ' + legend + ' '));
if (apijs.config.dialogue.saveVideo) {
this.elemC = document.createElement('a');
this.elemC.setAttribute('href', apijs.config.dialogue.fileVideo + '?id=' + infoVideo.id);
this.elemC.setAttribute('type', infoVideo.mime);
this.elemC.setAttribute('class', 'download');
this.elemC.appendChild(document.createTextNode(apijs.i18n.translate('downloadLink')));
this.elemB.appendChild(this.elemC);
}
this.elemA.appendChild(this.elemB);
this.fragment.firstChild.firstChild.appendChild(this.elemA);
};
}
function Slideshow() {
this.presentation = null;
this.totals = null;
this.media = null;
this.init = function () {
this.media = { album: null, number: null, first: null, prev: null, next: null, last: null };
this.presentation = [];
this.totals = [];
for (var i = 0, j = 0, id = null; document.getElementById(apijs.config.slideshow.ids + '.' + i) !== null; i++) {
id = apijs.config.slideshow.ids + '.' + i + '.999';
this.presentation[i] = (document.getElementById(id)) ? 0 : false;
if (document.getElementById(id)) {
if (apijs.config.navigator)
document.getElementById(id).addEventListener('click', apijs.slideshow.showMedia, false);
else
document.getElementById(id).setAttribute('onclick', "apijs.slideshow.showMedia(this.getAttribute('id')); return false;");
}
for (j = 0; document.getElementById(apijs.config.slideshow.ids + '.' + i + '.' + j) !== null; j++) {
id = apijs.config.slideshow.ids + '.' + i + '.' + j;
if (apijs.config.navigator) {
if (apijs.config.slideshow.hoverload && (this.presentation[i] !== false)) {
document.getElementById(id).addEventListener('click', apijs.slideshow.showMedia, false);
document.getElementById(id).addEventListener('mouseover', apijs.slideshow.showMedia, false);
}
else {
document.getElementById(id).addEventListener('click', apijs.slideshow.showMedia, false);
}
}
else {
if (apijs.config.slideshow.hoverload && (this.presentation[i] !== false)) {
document.getElementById(id).setAttribute('onclick', "apijs.slideshow.showMedia(this.getAttribute('id')); return false;");
document.getElementById(id).setAttribute('onmouseover', "apijs.slideshow.showMedia(this.getAttribute('id')); return false;");
}
else {
document.getElementById(id).setAttribute('onclick', "apijs.slideshow.showMedia(this.getAttribute('id')); return false;");
}
}
this.totals[i] = j;
}
}
};
this.showMedia = function (ev) {
var theMedia = { id: null, url: null, conf: null, num: 0, name: null, date: null, legend: null, width: null, height: null }, tmp = null;
if (typeof ev !== 'string') {
ev.preventDefault();
theMedia.id = this.getAttribute('id');
theMedia.url = this.getAttribute('href');
theMedia.conf = this.getElementsByTagName('input')[0].getAttribute('value').split('|');
tmp = theMedia.id.split('.');
theMedia.album = parseInt(tmp[1], 10);
theMedia.number = parseInt(tmp[2], 10);
}
else {
theMedia.id = ev;
theMedia.url = document.getElementById(theMedia.id).getAttribute('href');
theMedia.conf = document.getElementById(theMedia.id).getElementsByTagName('input')[0].getAttribute('value').split('|');
tmp = theMedia.id.split('.');
theMedia.album = parseInt(tmp[1], 10);
theMedia.number = parseInt(tmp[2], 10);
}
if ((apijs.slideshow.presentation[theMedia.album] !== false) && ((theMedia.conf.length > 1) || (theMedia.conf.length < 7))) {
if ((typeof ev !== 'string') && this.getElementsByTagName('img')[0].hasAttribute('class') &&
(this.getElementsByTagName('img')[0].getAttribute('class').indexOf('actif') > -1))
return;
if ((apijs.dialogue.dialogType === null) && ((theMedia.conf.length === 6) || (theMedia.conf.length === 4))) {
apijs.slideshow.updatePresentation(theMedia);
}
else if ((apijs.dialogue.dialogType === null) && ((theMedia.conf.length === 5) || (theMedia.conf.length === 3))) {
theMedia.number = apijs.slideshow.presentation[theMedia.album];
apijs.slideshow.showDialogue(theMedia);
}
else {
apijs.slideshow.updatePresentation(theMedia);
apijs.slideshow.showDialogue(theMedia);
}
}
else if ((theMedia.conf.length === 5) || (theMedia.conf.length === 3))
apijs.slideshow.showDialogue(theMedia);
else if (apijs.config.debug)
apijs.dialogue.dialogInformation(apijs.i18n.translate('debugInvalidUse'), '[pre]TheSlideshow » showMedia[br]' + apijs.i18n.translate('debugNotRecognizedConfig') + '[/pre]');
};
this.updatePresentation = function (theMedia) {
var id = null, tag = null, i = 0;
if ((theMedia.conf.length === 6) && (theMedia.conf[0].length > 0) && (theMedia.conf[1].length > 0) && (theMedia.conf[2].length > 0) &&
(theMedia.conf[3].length > 0) && (theMedia.conf[4].length > 0)) {
id = apijs.config.slideshow.ids + '.' + theMedia.album;
document.getElementById(id + '.999').setAttribute('href', document.getElementById(theMedia.id).getAttribute('href'));
document.getElementById(id + '.999').getElementsByTagName('img')[0].setAttribute('src', theMedia.conf.shift());
document.getElementById(id + '.999').getElementsByTagName('input')[0].setAttribute('value', theMedia.conf.join('|'));
for (tag = document.getElementById(id).getElementsByTagName('img'), i = 0; i < tag.length; i++) {
if (tag[i].hasAttribute('class') && (tag[i].getAttribute('class').indexOf('actif') > -1))
tag[i].removeAttribute('class');
}
document.getElementById(theMedia.id).getElementsByTagName('img')[0].setAttribute('class', 'actif');
this.presentation[theMedia.album] = theMedia.number;
}
else if (apijs.config.debug && (theMedia.conf.length === 6)) {
apijs.dialogue.dialogInformation(apijs.i18n.translate('debugInvalidConfig'), '[pre]TheSlideshow » changePhoto[br]➩ (string) url : ' + theMedia.conf[0] + '[br]➩ (number) width : ' + theMedia.conf[1] + '[br]➩ (number) height : ' + theMedia.conf[2] + '[br]➩ (string) date : ' + theMedia.conf[3] + '[br]➩ (string) legend : ' + theMedia.conf[4] + '[/pre]');
}
else if ((theMedia.conf.length === 4) && (theMedia.conf[0].length > 0) && (theMedia.conf[1].length > 0) &&
(theMedia.conf[2].length > 0)) {
id = apijs.config.slideshow.ids + '.' + theMedia.album;
document.getElementById(id + '.999').setAttribute('href', document.getElementById(theMedia.id).getAttribute('href'));
document.getElementById(id + '.999').getElementsByTagName('img')[0].setAttribute('src', theMedia.conf.shift());
document.getElementById(id + '.999').getElementsByTagName('input')[0].setAttribute('value', theMedia.conf.join('|'));
for (tag = document.getElementById(id).getElementsByTagName('img'), i = 0; i < tag.length; i++) {
if (tag[i].hasAttribute('class') && (tag[i].getAttribute('class').indexOf('actif') > -1))
tag[i].removeAttribute('class');
}
document.getElementById(theMedia.id).getElementsByTagName('img')[0].setAttribute('class', 'actif');
this.presentation[theMedia.album] = theMedia.number;
}
else if (apijs.config.debug && (theMedia.conf.length === 4)) {
apijs.dialogue.dialogInformation(apijs.i18n.translate('debugInvalidConfig'), '[pre]TheSlideshow » changePhoto[br]➩ (string) url : ' + theMedia.conf[0] + '[br]➩ (string) date : ' + theMedia.conf[1] + '[br]➩ (string) legend : ' + theMedia.conf[2] + '[/pre]');
}
};
this.showDialogue = function (theMedia) {
if ((theMedia.conf.length === 5) && (theMedia.conf[0].length > 0) && (theMedia.conf[1].length > 0) && (theMedia.conf[2].length > 0) &&
(theMedia.conf[3].length > 0)) {
theMedia.name = theMedia.conf[2];
theMedia.date = theMedia.conf[3];
theMedia.legend = theMedia.conf[4];
theMedia.width = parseInt(theMedia.conf[0], 10);
theMedia.height = parseInt(theMedia.conf[1], 10);
if (apijs.dialogue.dialogType !== null)
apijs.dialogue.actionClose(false);
apijs.dialogue.dialogPhoto(theMedia.width, theMedia.height, theMedia.url, theMedia.name, theMedia.date, theMedia.legend, true);
this.showNavigation(theMedia.album, theMedia.number);
}
else if (apijs.config.debug && (theMedia.conf.length === 5)) {
apijs.dialogue.dialogInformation(apijs.i18n.translate('debugInvalidConfig'), '[pre]TheSlideshow » showMedia[br]➩ (number) width : ' + theMedia.conf[0] + '[br]➩ (number) height : ' + theMedia.conf[1] + '[br]➩ (string) date : ' + theMedia.conf[2] + '[br]➩ (string) legend : ' + theMedia.conf[3] + '[/pre]');
}
else if ((theMedia.conf.length === 3) && (theMedia.conf[0].length > 0) && (theMedia.conf[1].length > 0)) {
theMedia.name = theMedia.conf[0];
theMedia.date = theMedia.conf[1];
theMedia.legend = theMedia.conf[2];
if (apijs.dialogue.dialogType !== null)
apijs.dialogue.actionClose(false);
apijs.dialogue.dialogVideo(theMedia.url, theMedia.name, theMedia.date, theMedia.legend, true);
this.showNavigation(theMedia.album, theMedia.number);
}
else if (apijs.config.debug && (theMedia.conf.length === 3)) {
apijs.dialogue.dialogInformation(apijs.i18n.translate('debugInvalidConfig'), '[pre]TheSlideshow » showMedia[br]➩ (string) date : ' + theMedia.conf[0] + '[br]➩ (string) legend : ' + theMedia.conf[1] + '[/pre]');
}
};
this.showNavigation = function (album, number) {
if ((apijs.dialogue.dialogType.indexOf('photo') > -1) || (apijs.dialogue.dialogType.indexOf('video') > -1)) {
this.media.album = album;
this.media.number = number;
this.media.first = apijs.config.slideshow.ids + '.' + this.media.album + '.0';
this.media.prev = apijs.config.slideshow.ids + '.' + this.media.album + '.' + (this.media.number - 1);
this.media.next = apijs.config.slideshow.ids + '.' + this.media.album + '.' + (this.media.number + 1);
this.media.last = apijs.config.slideshow.ids + '.' + this.media.album + '.' + this.totals[this.media.album];
if (document.getElementById(this.media.prev))
document.getElementById('prev').removeAttribute('disabled');
else
this.media.prev = null;
if (document.getElementById(this.media.next))
document.getElementById('next').removeAttribute('disabled');
else
this.media.next = null;
}
};
this.actionFirst = function () {
if ((this.media !== null) && (this.media.number > 0) && (this.media.number <= this.totals[this.media.album]))
this.showMedia(this.media.first);
};
this.actionPrev = function () {
if ((this.media !== null) && (this.media.prev !== null) && (this.media.number > 0))
this.showMedia(this.media.prev);
};
this.actionNext = function () {
if ((this.media !== null) && (this.media.next !== null) && (this.media.number < this.totals[this.media.album]))
this.showMedia(this.media.next);
};
this.actionLast = function () {
if ((this.media !== null) && (this.media.number >= 0) && (this.media.number < this.totals[this.media.album]))
this.showMedia(this.media.last);
};
}
function Upload() {
this.extensions = null;
this.callback = null;
this.params = null;
this.key = null;
this.percent = 0;
this.svgTimer = null;
this.svgDirection = 0;
this.svgWaiting = 0;
this.apcTimer = null;
this.apcWaiting = 0;
this.sendFile = function (title, maxsize, extensions, callback, params, data, icon) {
if ((typeof title === 'string') && (typeof maxsize === 'number') && (typeof extensions === 'object') && (typeof callback === 'function') && (typeof params !== 'undefined') && (typeof data === 'string') && (extensions !== null)) {
this.extensions = extensions;
this.callback = callback;
this.params = params;
this.key = uniqid();
apijs.dialogue.dialogFormUpload(title, this.prepareText(maxsize), data, this.key, icon);
}
else if (apijs.config.debug) {
if ((typeof callback === 'function') && (typeof callback.name === 'string') && (callback.name.length > 0))
callback = callback.name;
apijs.dialogue.dialogInformation(apijs.i18n.translate('debugInvalidCall'), '[pre]TheUpload » sendFile[br]➩ (string) title : ' + title + '[br]➩ (number) maxsize : ' + maxsize + '[br]➩ (array) extensions : ' + extensions + '[br]➩ (funcion) callback : ' + callback + '[br]➩ (object) params : ' + params + '[br]➩ (string) data : ' + data + '[br]➩ (string) icon : ' + icon + '[/pre]');
}
};
this.deleteFile = function (title, text, callback, params, key, icon) {
if ((typeof title === 'string') && (typeof text === 'string') && (typeof callback === 'function') && (typeof params !== 'undefined') && (typeof key === 'string')) {
this.callback = callback;
this.params = params;
icon = (typeof icon !== 'string') ? 'delete' : icon;
apijs.dialogue.dialogConfirmation(title, text, apijs.upload.actionDelete, key, icon);
}
else if (apijs.config.debug) {
if ((typeof callback === 'function') && (typeof callback.name === 'string') && (callback.name.length > 0))
callback = callback.name;
apijs.dialogue.dialogInformation(apijs.i18n.translate('debugInvalidCall'), '[pre]TheUpload » deleteFile[br]➩ (string) title : ' + title + '[br]➩ (string) text : ' + text + '[br]➩ (funcion) callback : ' + callback + '[br]➩ (object) params : ' + params + '[br]➩ (string) key : ' + key + '[br]➩ (string) icon : ' + icon + '[/pre]');
}
};
this.prepareText = function (maxsize) {
var text = null, extensions = null, lastExtension = null;
extensions = apijs.dialogue.clone(this.extensions);
lastExtension = extensions.pop();
if (lastExtension === '*') {
text = apijs.i18n.translate('uploadAllType', maxsize);
}
else if (extensions.length < 1) {
text = apijs.i18n.translate('uploadOneType', lastExtension, maxsize);
}
else {
extensions = extensions.join(', ');
text = apijs.i18n.translate('uploadMultiType', extensions, lastExtension, maxsize);
}
return text;
};
this.actionConfirm = function () {
var filename = document.getElementById('box').getElementsByTagName('input')[1].value;
var result = false, extensions = null, lastExtension = null;
extensions = apijs.dialogue.clone(this.extensions);
lastExtension = extensions.pop();
if (filename.length < 1) {
document.getElementById('box').getElementsByTagName('input')[1].focus();
}
else if ((lastExtension !== '*') && !in_array(filename.slice(filename.lastIndexOf('.') + 1).toLowerCase(), this.extensions)) {
if (filename.lastIndexOf('/') > 0)
filename = filename.slice(filename.lastIndexOf('/') + 1);
else if (filename.lastIndexOf('\\') > 0)
filename = filename.slice(filename.lastIndexOf('\\') + 1);
if (extensions.length < 1) {
apijs.dialogue.dialogInformation(document.getElementById('box').firstChild.firstChild.nodeValue, apijs.i18n.translate('uploadBadOneType', filename, lastExtension), 'eeupload');
}
else {
extensions = extensions.join(', ');
apijs.dialogue.dialogInformation(document.getElementById('box').firstChild.firstChild.nodeValue, apijs.i18n.translate('uploadBadMultiType', filename, extensions, lastExtension), 'eeupload');
}
}
else {
result = true;
document.getElementById('iframeUpload').setAttribute('onload', 'apijs.upload.endUpload();');
this.percent = 0;
this.svgDirection = 0;
this.svgWaiting = 10;
this.svgTimer = window.setInterval(apijs.upload.animGeneric, 50);
this.apcWaiting = 15;
this.apcTimer = window.setTimeout(apijs.upload.uploadRealTime, 1000);
window.setTimeout(function () {
apijs.dialogue.dialogProgress(document.getElementById('box').firstChild.firstChild.nodeValue, apijs.i18n.translate('uploadInProgress'));
}, 1);
}
return result;
};
this.actionDelete = function (key) {
var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function () {
if ((xhr.readyState === 4) && (xhr.status === 200)) {
try {
var result = null, status = null, message = null, icon = null;
result = xhr.responseXML;
status = result.getElementsByTagName('status')[0].firstChild.nodeValue;
message = result.getElementsByTagName('message')[0].firstChild.nodeValue;
icon = (status === 'success') ? 'information' : 'error';
apijs.dialogue.dialogInformation(document.getElementById('box').firstChild.firstChild.nodeValue, message, icon);
if (status === 'success')
apijs.upload.callback(apijs.upload.params);
}
catch (ee) {
apijs.dialogue.dialogInformation(document.getElementById('box').firstChild.firstChild.nodeValue, '[pre]' + ee + '[/pre]', 'error');
}
}
else if ((xhr.readyState === 4) && (xhr.status !== 200)) {
apijs.dialogue.dialogInformation(document.getElementById('box').firstChild.firstChild.nodeValue, apijs.i18n.translate('deleteNotFound', xhr.status, xhr.statusText), 'error');
}
};
xhr.open('GET', apijs.config.dialogue.fileUpload + '?delete=' + key, true);
xhr.send(null);
};
this.uploadRealTime = function () {
var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function () {
if ((xhr.readyState === 4) && (xhr.status === 200) && (apijs.upload.apcWaiting > 0) && (apijs.upload.percent < 100)) {
try {
var result = null, status = null, percent = null, rate = null, time = null;
result = xhr.responseXML;
status = result.getElementsByTagName('status')[0].firstChild.nodeValue;
if (status === 'uploading') {
percent = parseInt(result.getElementsByTagName('percent')[0].firstChild.nodeValue, 10);
rate = result.getElementsByTagName('rate')[0].firstChild.nodeValue;
time = result.getElementsByTagName('time')[0].firstChild.nodeValue;
if ((percent > 0) && (percent < 100) && (percent > apijs.upload.percent)) {
if (apijs.upload.svgTimer)
clearInterval(apijs.upload.svgTimer);
rate = ((rate === 'false') || (rate.length < 1)) ? false : parseInt(rate, 10);
time = ((time === 'false') || (time.length < 1)) ? false : time;
apijs.upload.animToValue(percent, rate, time);
}
apijs.upload.percent = percent;
apijs.upload.apcTimer = window.setTimeout(apijs.upload.uploadRealTime, 1000);
}
else if (status === 'pending') {
apijs.upload.apcWaiting -= 1;
apijs.upload.apcTimer = window.setTimeout(apijs.upload.uploadRealTime, 1000);
}
}
catch (ee) {
apijs.upload.apcWaiting -= 1;
apijs.upload.apcTimer = window.setTimeout(apijs.upload.uploadRealTime, 1000);
if (typeof console === 'object')
console.log('apijs.upload.uploadRealTime : ' + xhr.status + ' ' + xhr.statusText + ' ' + ee);
}
}
else if ((xhr.readyState === 4) && (xhr.status !== 200) && (typeof console === 'object')) {
console.log('apijs.upload.uploadRealTime : ' + xhr.status + ' ' + xhr.statusText);
}
};
xhr.open('GET', apijs.config.dialogue.fileUpload + '?realtime=' + apijs.upload.key, true);
xhr.send(null);
};
this.endUpload = function () {
if (this.apcTimer)
clearTimeout(this.apcTimer);
if (this.svgTimer)
clearInterval(this.svgTimer);
this.percent = 100;
this.svgTimer = null;
this.svgDirection = 0;
this.svgWaiting = 0;
this.apcTimer = null;
this.apcWaiting = 0;
try {
var result = null, status = null, message = null;
if (apijs.config.navigator) {
result = window.frames['iframeUpload.' + this.key].document;
status = result.getElementsByTagName('status')[0].firstChild.nodeValue;
message = result.getElementsByTagName('message')[0].firstChild.nodeValue;
}
else {
result = window.frames['iframeUpload.' + this.key].document.documentElement.getElementsByTagName('body')[0].innerHTML;
result = result.replace(/[\r\n\t]|<[^>]+>|&[a-z]+;/g, '');
status = (/status(.+)\/status/i).test(result);
status = RegExp.$1;
message = (/message(.+)\/message/i).test(result);
message = RegExp.$1;
if (status.length < 1)
throw 'TypeError: status is undefined';
}
if (apijs.config.navigator && document.getElementById('progressbar')) {
document.getElementById('iframeUpload').removeAttribute('onload');
document.getElementById('iframeUpload').setAttribute('src', apijs.config.dialogue.imageUpload.src);
}
if (status === 'success') {
this.animToValue(100);
window.setTimeout(function () { apijs.upload.callback(apijs.upload.key, apijs.upload.params); }, 1500);
}
else {
apijs.dialogue.dialogInformation(document.getElementById('box').firstChild.firstChild.nodeValue, message, 'eeupload');
}
}
catch (ee) {
try {
if (apijs.config.navigator) {
result = window.frames['iframeUpload.' + this.key].document;
status = result.getElementsByTagName('title')[0].firstChild.nodeValue;
message = result.getElementsByTagName('p')[0].firstChild.nodeValue;
}
else {
result = window.frames['iframeUpload.' + this.key].document.documentElement.innerHTML;
status = (/<title>(.+)<\/title>/i).test(result);
status = RegExp.$1;
message = (/<p>(.+)<\/p>/i).test(result);
message = RegExp.$1;
}
apijs.dialogue.dialogInformation(status, message, 'eeupload');
return;
}
catch (ff) {
if (typeof console === 'object')
console.log('apijs.upload.endUpload : ' + ff);
}
apijs.dialogue.dialogInformation(document.getElementById('box').firstChild.firstChild.nodeValue, '[pre]' + ee + '[/pre]', 'eeupload');
}
};
this.animGeneric = function () {
if ((apijs.upload.apcWaiting > 0) && (apijs.upload.percent < 100) && document.getElementById('progressbar')) {
try {
var rect = (apijs.config.navigator) ? document.getElementById('progressbar').getSVGDocument().getElementById('bar') : document.getElementById('progressbar').getSVGDocument().rootElement.getElementById('bar');
}
catch (ee) {
apijs.upload.svgWaiting -= 1;
return;
}
if (apijs.upload.svgDirection === 0) {
rect.setAttribute('x', parseFloat(rect.getAttribute('x'), 10) + 1 + '%');
if (parseInt(rect.getAttribute('x'), 10) >= (100 - parseFloat(rect.getAttribute('width'), 10)))
apijs.upload.svgDirection = 1;
}
else {
rect.setAttribute('x', parseFloat(rect.getAttribute('x'), 10) - 1 + '%');
if (parseInt(rect.getAttribute('x'), 10) <= 0)
apijs.upload.svgDirection = 0;
}
}
else {
apijs.upload.svgWaiting = 0;
clearInterval(apijs.upload.svgTimer);
}
};
this.animToValue = function (percent, rate, time) {
try {
var rect = null, text = null;
rect = (apijs.config.navigator) ? document.getElementById('progressbar').getSVGDocument().getElementById('bar') : document.getElementById('progressbar').getSVGDocument().rootElement.getElementById('bar');
text = (apijs.config.navigator) ? document.getElementById('progressbar').getSVGDocument().getElementById('text') : document.getElementById('progressbar').getSVGDocument().rootElement.getElementById('text');
}
catch (ee) {
return;
}
if (percent < 100) {
if (rect.getAttribute('x') !== '0')
rect.setAttribute('x', '0');
rect.setAttribute('width', percent + '%');
if ((typeof rate === 'number') && (typeof time === 'string'))
text.firstChild.replaceData(0, text.firstChild.length, apijs.i18n.translate('uploadRateTime', percent, rate, time));
else if (typeof rate === 'number')
text.firstChild.replaceData(0, text.firstChild.length, apijs.i18n.translate('uploadRate', percent, rate));
else if (typeof time === 'string')
text.firstChild.replaceData(0, text.firstChild.length, apijs.i18n.translate('uploadTime', percent, time));
else
text.firstChild.replaceData(0, text.firstChild.length, percent + '%');
}
else {
rect.setAttribute('x', '0');
rect.setAttribute('width', '100%');
text.firstChild.replaceData(0, text.firstChild.length, '100%');
}
};
}
function BBcode() {
this.bbcode = null;
this.object = null;
this.fragment = null;
this.emotes = false;
this.init = function (data, emotes) {
this.object = { tag: 'div', content: [] };
this.object['class'] = 'bbcode';
this.bbcode = (data[0] !== '[') ? '[p]' + data + '[/p]' : data;
if ((apijs.config.bbcode !== null) && (typeof apijs.config.bbcode === 'object'))
this.emotes = (typeof emotes === 'boolean') ? emotes : true;
};
this.exec = function () {
this.readData(this.bbcode, 0);
this.fragment = document.createDocumentFragment();
this.fragment.appendChild(this.createDomFragment(this.object));
};
this.get = function () {
return this.fragment;
};
this.readData = function (data, level) {
var element = null, attributes = null, content = null, text = null, other = null, cut = 0;
if ((data[0] !== '[') && ((cut = data.search(/\[([a-z1-6]+)(?: [a-z:]+=["'][^\]]*["'])*\]/)) > -1)) {
text = data.slice(0, cut);
this.readData(text, level);
other = data.slice(cut);
if ((cut = other.indexOf('[/' + RegExp.$1 + ']')) > -1) {
element = other.slice(0, cut + RegExp.$1.length + 3);
other = other.slice(cut + RegExp.$1.length + 3);
this.readData(element, level);
}
if (/^(\[(?:area|br|col|hr|iframe|img|input|param)(?: [a-z:]+=["'][^\]]*["'])*\])/.test(other)) {
element = other.slice(0, RegExp.$1.length);
other = other.slice(RegExp.$1.length);
this.readData(element, level);
}
if (other.length > 0)
this.readData(other, level);
}
else if (/^\[(area|br|col|hr|iframe|img|input|param)((?: [a-z:]+=["'][^\]]*["'])*)\]/.test(data)) {
element = RegExp.$1;
attributes = RegExp.$2;
other = data.slice(2 + element.length + attributes.length);
this.addElement(element, attributes, level);
if (other.length > 0)
this.readData(other, level);
}
else if (/^\[([a-z1-6]+)((?: [a-z:]+=["'][^\]]*["'])*)\]/.test(data)) {
element = RegExp.$1;
attributes = RegExp.$2;
cut = data.indexOf('[/' + element + ']');
content = data.slice(2 + element.length + attributes.length, cut);
other = data.slice(3 + element.length + cut);
this.addElement(element, attributes, level);
this.readData(content, level + 1);
if (other.length > 0)
this.readData(other, level);
}
else {
this.addElement(data, null, level);
}
};
this.addElement = function (data, attributes, level) {
var directlink = null, attr = null, name = null, value = null, i = 0, hasEmotes = false, dataArray = null;
directlink = this.getContentNode(this.object, 0, level);
if (attributes !== null) {
if (directlink.hasOwnProperty('content'))
directlink.content.push({ tag: data });
else
directlink.content = [{ tag: data }];
if (attributes.length > 5) {
attributes = attributes.slice(1, -1).split(/["'] /);
for (attr in attributes) if (attributes.hasOwnProperty(attr)) {
name = attributes[attr].slice(0, attributes[attr].indexOf('='));
value = attributes[attr].slice(attributes[attr].indexOf('=') + 2);
if (directlink.hasOwnProperty('content'))
directlink.content[directlink.content.length - 1][name] = value;
else
directlink[name] = value;
}
}
}
else {
if (this.emotes) {
dataArray = data.split(' ');
for (value in dataArray) {
if (typeof dataArray[value] !== 'string')
continue;
if (apijs.config.bbcode.hasOwnProperty(dataArray[value])) {
hasEmotes = true;
currentEmote = apijs.config.bbcode[dataArray[value]];
dataArray[value] = '[img src="' + currentEmote.src + '" width="' + currentEmote.width + '" height="' + currentEmote.height + '" alt="' + dataArray[value] + '" class="emote"]';
}
else if (apijs.config.bbcode.hasOwnProperty(dataArray[value].slice(0, -1))) {
hasEmotes = true;
currentEmote = apijs.config.bbcode[dataArray[value].slice(0, -1)];
dataArray[value] = '[img src="' + currentEmote.src + '" width="' + currentEmote.width + '" height="' + currentEmote.height + '" alt="' + dataArray[value] + '" class="emote"]' + dataArray[value].slice(-1);
}
}
data = dataArray.join(' ');
if (hasEmotes)
this.readData(data, level);
else if (directlink.hasOwnProperty('content'))
directlink.content.push({ text: data });
else
directlink.content = [{ text: data }];
}
else {
if (directlink.hasOwnProperty('content'))
directlink.content.push({ text: data });
else
directlink.content = [{ text: data }];
}
}
};
this.getContentNode = function (dom, level, maxlevel) {
if ((dom.content.length < 1) || (maxlevel < 1))
return dom;
for (var i = dom.content.length - 1; i >= 0; i--) {
if (dom.content[i].hasOwnProperty('content') && (++level < maxlevel))
return this.getContentNode(dom.content[i], level, maxlevel);
else
return dom.content[i];
}
};
this.createDomFragment = function (data) {
var tag = null, attr = null, elem = 0;
if (data.hasOwnProperty('tag'))
tag = document.createElement(data.tag);
else
return document.createTextNode(data.text);
for (attr in data) if (data.hasOwnProperty(attr)) {
if (attr === 'text')
tag.appendChild(document.createTextNode(data[attr]));
if ((attr !== 'tag') && (attr !== 'text') && (attr !== 'content'))
tag.setAttribute(attr, data[attr]);
if ((data.tag === 'a') && (attr === 'class') && (data[attr].indexOf('popup') > -1) && (typeof openTab === 'function')) {
if (apijs.config.navigator)
tag.addEventListener('click', openTab, false);
else
tag.setAttribute('onclick', 'window.open(this.href); return false;');
}
}
if (data.hasOwnProperty('content')) {
for (elem = 0; elem < data.content.length; elem++)
tag.appendChild(this.createDomFragment(data.content[elem]));
}
return tag;
};
}
function Internationalization() {
this.data = [];
this.data.en = {
buttonOk: "Ok",
buttonCancel: "Cancel",
buttonConfirm: "Confirm",
buttonClose: "Close",
buttonPrev: "Previous",
buttonNext: "Next",
downloadLink: "Download",
operationTooLong: "This operation is too long ? ",
warningLostChange: "Warning : all changes in progress will be lost.",
reloadLink: "Reload this page",
operationInProgress: "Operation in progress...",
uploadInProgress: "Upload in progress...",
savingInProgress: "Saving...",
uploadTime: "§% (§)",
uploadRate: "§% (§ KB/s)",
uploadRateTime: "§% (§ KB/s - §)",
uploadAllType: "All files are accepted.[br]Maximum size : § [abbr title='Megabyte']MB[/abbr].",
uploadOneType: "Accepted file format : §.[br]Maximum size : § [abbr title='Megabyte']MB[/abbr].",
uploadMultiType: "Accepted file formats : § and §.[br]Maximum size : § [abbr title='Megabyte']MB[/abbr].",
uploadBadOneType: "[p]It is impossible to send the file because the file format proposed isn't allowed.[/p][p]➩ Proposed file : [strong]§[/strong][br]➩ Accepted file format : §.[/p]",
uploadBadMultiType: "[p]It is impossible to send the file because the file format proposed isn't allowed.[/p][p]➩ Proposed file : [strong]§[/strong][br]➩ Accepted file formats : § and §.[/p]",
deleteNotFound: "Unfortunately, it is currently impossible to delete requested file (Error § : §).",
browserNoVideo: "[p]Your browser doesn't support the <video> tag.[br]Remember to upgrade your browser.[/p][ul][li][a href='http://www.google.com/chrome?hl=en' class='popup']Chrome 3.0+[/a][/li][li][a href='http://www.mozilla-europe.org/en/firefox/' class='popup']Firefox 3.5+[/a][/li][li][a href='http://windows.microsoft.com/en-US/internet-explorer/products/ie/home' class='popup']Internet Explorer 9.0+[/a][/li][li][a href='http://www.konqueror.org/' class='popup']Konqueror 4.4+[/a][/li][li][a href='http://www.opera.com/' class='popup']Opera 10.50+[/a][/li][li][a href='http://www.apple.com/safari/' class='popup']Safari 3.1+[/a][/li][/ul]",
debugInvalidCall: "(debug) Invalid call",
debugInvalidUse: "(debug) Invalid use",
debugUnknownAction: "(debug) Unknown action",
debugKeyDetected: "(debug) Key detected",
debugKeyCode: "Code of the seizure key : §",
debugInvalidConfig: "(debug) Invalid configuration",
debugNotRecognizedConfig: "Image configuration wasn't recognized",
debugNotExist: "doesn't exist (unlikely error)"
};
this.data.fr = {
buttonOk: "Ok",
buttonCancel: "Annuler",
buttonConfirm: "Valider",
buttonClose: "Fermer",
buttonPrev: "Précédent",
buttonNext: "Suivant",
downloadLink: "Télécharger",
operationTooLong: "Cette opération prend trop de temps ? ",
warningLostChange: "Attention : toutes les modifications en cours seront perdues.",
reloadLink: "Rechargez la page",
operationInProgress: "Opération en cours...",
uploadInProgress: "Envoi du fichier en cours...",
savingInProgress: "Enregistrement en cours...",
uploadTime: "§% (§)",
uploadRate: "§% (§ Ko/s)",
uploadRateTime: "§% (§ Ko/s - §)",
uploadAllType: "Tous les fichiers sont acceptés.[br]Taille maximale : § [abbr title='Mégaoctet']Mo[/abbr].",
uploadOneType: "Format de fichier accepté : §.[br]Taille maximale : § [abbr title='Mégaoctet']Mo[/abbr].",
uploadMultiType: "Formats de fichier acceptés : § et §.[br]Taille maximale : § [abbr title='Mégaoctet']Mo[/abbr].",
uploadBadOneType: "[p]Il est impossible d'envoyer le fichier car le format du fichier proposé n'est pas autorisé.[/p][p]➩ Fichier proposé : [strong]§[/strong][br]➩ Format de fichier accepté : §.[/p]",
uploadBadMultiType: "[p]Il est impossible d'envoyer le fichier car le format du fichier proposé n'est pas autorisé.[/p][p]➩ Fichier proposé : [strong]§[/strong][br]➩ Formats de fichier acceptés : § et §.[/p]",
deleteNotFound: "Malheureusement, il est actuellement impossible de supprimer le fichier demandé (Erreur § : [span xml:lang='en']§[/span]).",
browserNoVideo: "[p]Votre navigateur ne supporte pas la balise <video>.[br]Pensez à mettre à jour votre navigateur.[/p][ul][li][a href='http://www.google.com/chrome?hl=fr' class='popup']Chrome 3.0+[/a][/li][li][a href='http://www.mozilla-europe.org/fr/firefox/' class='popup']Firefox 3.5+[/a][/li][li][a href='http://windows.microsoft.com/fr-FR/internet-explorer/products/ie/home' class='popup']Internet Explorer 9.0+[/a][/li][li][a href='http://www.konqueror.org/' class='popup']Konqueror 4.4+[/a][/li][li][a href='http://www.opera.com/' class='popup']Opera 10.50+[/a][/li][li][a href='http://www.apple.com/fr/safari/' class='popup']Safari 3.1+[/a][/li][/ul]",
debugInvalidCall: "(debug) Appel invalide",
debugInvalidUse: "(debug) Utilisation invalide",
debugUnknownAction: "(debug) Action inconnue",
debugKeyDetected: "(debug) Touche détectée",
debugKeyCode: "Code de la touche saisie : §",
debugInvalidConfig: "(debug) Configuration invalide",
debugNotRecognizedConfig: "La configuration de l'image n'a pas été reconnue",
debugNotExist: "n'existe pas (erreur improbable)"
};
this.init = function () {
if (apijs.config.autolang) {
var autolang = null;
if (document.getElementsByTagName('html')[0].getAttribute('xml:lang'))
autolang = document.getElementsByTagName('html')[0].getAttribute('xml:lang').slice(0, 2);
else if (document.getElementsByTagName('html')[0].getAttribute('lang'))
autolang = document.getElementsByTagName('html')[0].getAttribute('lang').slice(0, 2);
if ((typeof autolang === 'string') && this.data.hasOwnProperty(autolang))
apijs.config.lang = autolang;
else if ((typeof apijs.config.lang !== 'string') || !this.data.hasOwnProperty(apijs.config.lang))
apijs.config.lang = 'en';
}
else if ((typeof apijs.config.lang !== 'string') || !this.data.hasOwnProperty(apijs.config.lang)) {
apijs.config.lang = 'en';
}
};
this.translate = function (word) {
if (typeof this.data[apijs.config.lang][word] !== 'string') {
return word;
}
else if (arguments.length > 1) {
var i = 0, arg = 1, data = '', translation = '';
for (data = this.data[apijs.config.lang][word].split('§'); i < data.length; i++)
translation += (arg < arguments.length) ? data[i] + arguments[arg++] : data[i];
return translation;
}
else {
return this.data[apijs.config.lang][word];
}
};
this.changeLang = function (lang) {
if ((typeof lang === 'string') && this.data.hasOwnProperty(lang)) {
apijs.config.lang = lang;
return true;
}
else {
return false;
}
};
}
/**
 * Copyright 2011 | Fabrice Creuzot (luigifab) <code~luigifab~info>
 * http://www.luigifab.info/magento/apijs.php
 *
 * This program is free software, you can redistribute it or modify
 * it under the terms of the GNU General Public License (GPL) as published
 * by the free software foundation, either version 2 of the license, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but without any warranty, without even the implied warranty of
 * merchantability or fitness for a particular purpose. See the
 * GNU General Public License (GPL) for more details.
 */
var apijs = {
i18n: null,
dialogue: null,
slideshow: null,
upload: null,
config: {
lang: 'fr',
debug: false,
debugkey: false,
navigator: true,
transition: true,
autolang: true,
dialogue: {
blocks: [],
hiddenPage: false,
savingDialog: false,
savingTime: 700,
emotes: false,
showLoader: true,
showFullsize: false,
savePhoto: false,
saveVideo: false,
videoAutoplay: true,
videoWidth: 640,
videoHeight: 480,
imagePrev: null,
imageNext: null,
imageClose: { src: 'images/apijs/dialogue/close.png', width: 60, height: 22 },
imageUpload: { src: 'images/apijs/dialogue/progressbar.svg.php', width: 300, height: 17 },
filePhoto: null,
fileVideo: null,
fileUpload: null
},
slideshow: {
ids: 'diaporama',
hiddenPage: false,
hoverload: false
}
}
};
if (navigator.userAgent.indexOf('MSIE 8') > -1) {
apijs.config.navigator = false;
apijs.config.transition = false;
document.createElement('video');
window.innerWidth = document.documentElement.clientWidth;
window.innerHeight = document.documentElement.clientHeight;
window.attachEvent('onload', start);
}
else {
window.addEventListener('load', start, false);
}
function start() {
if ((typeof document.getElementsByTagName('body')[0].style.transitionDuration !== 'string') &&
(typeof document.getElementsByTagName('body')[0].style.MozTransitionDuration !== 'string') &&
(typeof document.getElementsByTagName('body')[0].style.webkitTransitionDuration !== 'string')) {
apijs.config.transition = false;
}
if (typeof Internationalization === 'function') {
apijs.i18n = new Internationalization();
apijs.i18n.init();
if ((typeof Dialogue === 'function') && (typeof BBcode === 'function')) {
apijs.dialogue = new Dialogue();
if (typeof Slideshow === 'function') {
apijs.slideshow = new Slideshow();
apijs.slideshow.init();
}
if (typeof Upload === 'function') {
apijs.upload = new Upload();
}
}
}
if (typeof setApijsConfig === 'function')
setApijsConfig();
}
/**
 * Copyright 2010 | Kevin van Zonneveld
 * http://phpjs.org/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the software),
 * to deal in the software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * or sell copies of the software, and to permit persons to whom the
 * software is furnished to do so, subject to the following conditions.
 *
 * The software is provided as is, without warranty of any kind, express
 * or implied, including but not limited to the warranties of
 * merchantability, fitness for a particular purpose and noninfringement.
 *
 * In no event the authors or copyright holders be liable for any claim, damages
 * or other liability, whether in an action of contract, tort or otherwise,
 * arising from, out of or in connection with the software or the use or
 * other dealings in the software.
 *
 * See the MIT license for more details.
 */
function str_shuffle(data) {
var result = '', rand = 0;
while (data.length > 0) {
rand = Math.floor(Math.random() * data.length);
result += data[rand];
data = data.substring(0, rand) + data.substr(rand + 1);
}
return result;
}
function in_array(data, array) {
for (var key in array) {
if (array[key] === data)
return true;
}
return false;
}
function ucwords(data) {
return data.replace(/^(.)|\s(.)/g, function ($1) { return $1.toUpperCase(); } );
}
function uniqid() {
return str_shuffle('958753cfb564e097e2f9121a43da98708727f30365b1da846cc6fae22afe7ebcbda4030bd81f1e4d0615b96358dc294c').substr(0, 8);
}